# This is a basic workflow to help you get started with Actions

name: iOS e2e tests

# Controls when the workflow will run
on: [pull_request, workflow_dispatch]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "ios-e2e"
  ios-e2e:
    # The type of runner that the job will run on
    runs-on: ["self-hosted"]
    # Cancel current builds if there's a newer commit on the same branch
    concurrency: 
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3


      - name: Debug - Print environment variables
        run: |
          echo "Printing some environment variables for debugging..."
          echo "HOME=$HOME"
          echo "GITHUB_WORKFLOW=$GITHUB_WORKFLOW"
          echo "CI=$CI"
      
      # Debug before setting up environment variables and scripts
      - name: Debug - Before setting up ENV vars & scripts
        run: |
          echo "Before setting up environment..."
          ls -la
          printenv | sort

      - name: Set up github keys
        run:  echo 'hi 00' && git config core.sshCommand "ssh -i ~/.ssh/id_ed25519 -F /dev/null" &&  echo 'hi 0'

     - name: Set up ENV vars & scripts
        run: |
          # read local env vars
          source ~/.bashrc
          # fetch env vars
          git clone git@github.com:rainbow-me/rainbow-env.git
          # unpack dotenv
          mv rainbow-env/dotenv .env && rm -rf rainbow-env 
          # run CI scripts
          eval $CI_SCRIPTS
          # tweak dotenv for e2e 
          sed -i''-e "s/\IS_TESTING=false/IS_TESTING=true/" .env && rm -f .env-e

      # Debug after setting up environment variables and scripts
      - name: Debug - After setting up ENV vars & scripts
        run: |
          echo "After setting up environment..."
          ls -la
          printenv | sort
          echo "Checking if .env file exists and its contents..."
          if [ -f .env ]; then
            cat .env
          else
            echo ".env file does not exist."
          fi

     - name: Install deps via Yarn
        run: yarn setup-ci

      - name: Check for frozen lockfile
        run: yarn check-lockfile

      - name: Audit CI
        run:  yarn audit-ci --config audit-ci.jsonc

      - name: Lint
        run: yarn lint:ci

      # Debug after installing dependencies
      - name: Debug - After installing dependencies
        run: |
          echo "Dependencies installed. Listing node_modules..."
          ls -la node_modules/

      - name: Install Pods
        run: cd ios && bundle install && pod install --repo-update && cd ..
      
      # Debug after installing Pods
      - name: Debug - After installing Pods
        run: |
          echo "Pods installed. Listing ios/Pods directory..."
          ls -la ios/Pods/
        
      - name: Rebuild detox cache
        run: ./node_modules/.bin/detox clean-framework-cache && ./node_modules/.bin/detox build-framework-cache

      - name: Build the app in Release mode
        run: ./node_modules/.bin/detox build --configuration ios.sim.release

      - name: Run iOS e2e tests
        run: ./node_modules/.bin/detox test -R 5 --configuration ios.sim.release --forceExit --bail
